<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__wifijoin" kind="group">
    <compoundname>wifijoin</compoundname>
    <title>WHD Wi-Fi Join, Scan and Halt API</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__wifijoin_1ga9f8c6096922212981dd2101a17aec471" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* whd_scan_result_callback_t) (whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status)</definition>
        <argsstring>)(whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status)</argsstring>
        <name>whd_scan_result_callback_t</name>
        <briefdescription>
<para>Scan result callback function pointer type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer that indicates where to put the next scan result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User provided data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of scan process </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="208" column="1" bodyfile="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__wifijoin_1ga2604c8dec9eff39e79b3281496da2611" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* whd_auth_result_callback_t) (void *result_ptr, uint32_t len, whd_auth_status_t status, uint8_t *flag, void *user_data)</definition>
        <argsstring>)(void *result_ptr, uint32_t len, whd_auth_status_t status, uint8_t *flag, void *user_data)</argsstring>
        <name>whd_auth_result_callback_t</name>
        <briefdescription>
<para>Auth result callback function pointer type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result_prt</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer that indicates where to put the auth result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of auth process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag of h2e will be indicated in auth request event, otherwise is NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user specific data that will be passed directly to the callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="286" column="1" bodyfile="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wifijoin_1ga2752d761f639411027fffa67038d8a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_scan_synch</definition>
        <argsstring>(whd_interface_t ifp, whd_sync_scan_result_t *scan_result, uint32_t *count)</argsstring>
        <name>whd_wifi_scan_synch</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1ab30a697b3ebbf2007dc09194b54b1a1b" kindref="member">whd_sync_scan_result_t</ref> *</type>
          <declname>scan_result</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Initiates a scan to search for 802.11 networks. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions returns the scan results with limited sets of parameter in a buffer provided by the caller. It is also a blocking call. It is an simplified version of the <ref refid="group__wifijoin_1ga82d8c980d15acf0e6e18b56423f4e52b" kindref="member">whd_wifi_scan()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scan_result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user requested records buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the no of records user is interested in, and also to the no of record received.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>When scanning specific channels, devices with a strong signal strength on nearby channels may be detected</para>
</simplesect>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1ga82d8c980d15acf0e6e18b56423f4e52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_scan</definition>
        <argsstring>(whd_interface_t ifp, whd_scan_type_t scan_type, whd_bss_type_t bss_type, const whd_ssid_t *optional_ssid, const whd_mac_t *optional_mac, const uint16_t *optional_channel_list, const whd_scan_extended_params_t *optional_extended_params, whd_scan_result_callback_t callback, whd_scan_result_t *result_ptr, void *user_data)</argsstring>
        <name>whd_wifi_scan</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1af7ac1b0be4ce67f3e82b876c2f27fd3a" kindref="member">whd_scan_type_t</ref></type>
          <declname>scan_type</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a3070614a06a8989b9eb207e9f1286c5f" kindref="member">whd_bss_type_t</ref></type>
          <declname>bss_type</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref> *</type>
          <declname>optional_ssid</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>optional_mac</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>optional_channel_list</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__scan__extended__params__t" kindref="compound">whd_scan_extended_params_t</ref> *</type>
          <declname>optional_extended_params</declname>
        </param>
        <param>
          <type><ref refid="group__wifijoin_1ga9f8c6096922212981dd2101a17aec471" kindref="member">whd_scan_result_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a58298b1b5c2f2425d5aed061de48aaa7" kindref="member">whd_scan_result_t</ref> *</type>
          <declname>result_ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Initiates a scan to search for 802.11 networks. </para>
        </briefdescription>
        <detaileddescription>
<para>The scan progressively accumulates results over time, and may take between 1 and 10 seconds to complete. The results of the scan will be individually provided to the callback function. Note: The callback function will be executed in the context of the WHD thread and so must not perform any actions that may cause a bus transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scan_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the scan should be Active, Passive or scan Prohibited channels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bss_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the scan should search for Infrastructure networks (those using an Access Point), Ad-hoc networks, or both types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks using the specified SSID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_mac</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks where the BSSID (MAC address of the Access Point) matches the specified MAC address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_channel_list</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks on the specified channels - array of channel numbers to search, terminated with a zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_extended_params</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will obey the specifications about dwell times and number of probes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function which will receive and process the result data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer to a result storage structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user specific data that will be passed directly to the callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>- When scanning specific channels, devices with a strong signal strength on nearby channels may be detected<itemizedlist>
<listitem><para>Callback must not use blocking functions, nor use WHD functions, since it is called from the context of the WHD thread.</para>
</listitem><listitem><para>The callback, result_ptr and user_data variables will be referenced after the function returns. Those variables must remain valid until the scan is complete.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gacf8632bb68cef4d831083a66bee7b8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_stop_scan</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_stop_scan</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Abort a previously issued scan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1ga58ef7de14079c4b2b879e786a5e15c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_external_auth_request</definition>
        <argsstring>(whd_interface_t ifp, whd_auth_result_callback_t callback, void *result_ptr, void *user_data)</argsstring>
        <name>whd_wifi_external_auth_request</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="group__wifijoin_1ga2604c8dec9eff39e79b3281496da2611" kindref="member">whd_auth_result_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>result_ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Initiates SAE auth. </para>
        </briefdescription>
        <detaileddescription>
<para>The results of the auth will be individually provided to the callback function. Note: The callback function will be executed in the context of the WHD thread and so must not perform any actions that may cause a bus transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function which will receive and process the result data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer to a result storage structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user specific data that will be passed directly to the callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>- Callback must not use blocking functions, nor use WHD functions, since it is called from the context of the WHD thread.<itemizedlist>
<listitem><para>The callback, result_ptr and user_data variables will be referenced after the function returns. Those variables must remain valid until the scan is complete.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gab5bc462251b6849ebd8e708a2560066d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_stop_external_auth_request</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_stop_external_auth_request</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Abort authentication request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gac767814ae445f735b51686db20c780be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_join</definition>
        <argsstring>(whd_interface_t ifp, const whd_ssid_t *ssid, whd_security_t auth_type, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_join</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__ssid__t" kindref="compound">whd_ssid_t</ref> *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref></type>
          <declname>auth_type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Joins a Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Scans for, associates and authenticates with a Wi-Fi network. On successful return, the system is ready to send data packets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>A null terminated string containing the SSID name of the network to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte array containing either the cleartext security key for WPA/WPA2/WPA3 secured networks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the security_key in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>In case of WPA3/WPA2 transition mode, the security_key value is WPA3 password.</para>
</simplesect>
<simplesect kind="return"><para>WHD_SUCCESS when the system is joined and ready to send data packets Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1gae41c4ab0b2f3ecc433a6c4e89238b066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_join_specific</definition>
        <argsstring>(whd_interface_t ifp, const whd_scan_result_t *ap, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_join_specific</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="whd__types_8h_1a58298b1b5c2f2425d5aed061de48aaa7" kindref="member">whd_scan_result_t</ref> *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Joins a specific Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Associates and authenticates with a specific Wi-Fi access point. On successful return, the system is ready to send data packets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a whd_scan_result_t structure containing AP details and set ap.channel to 0 for unspecificed channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte array containing either the cleartext security key for WPA/WPA2 secured networks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the security_key in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the system is joined and ready to send data packets Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifijoin_1ga971ed7d8e459c715aa9bf3c52b563d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t whd_wifi_leave</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_leave</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Disassociates from a Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Applicable only for STA role</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS On successful disassociation from the AP Error code If an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HsiehYuanPin/01_SRC/whd/inc/whd_wifi_api.h" line="524" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wi-Fi APIs for join, scan &amp; leave. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
